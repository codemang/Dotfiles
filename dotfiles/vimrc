" <<<< Plug >>>> {{{
  " Auto-install VimPlug if it's not yet installed.
  " https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
  let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
  if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif

  " Load all Vim plugins.
  call plug#begin('~/.local/share/nvim/plugged')
    " ---- Navigation ----
    Plug 'scrooloose/nerdtree' " Tree-styled file navigator
    Plug 'christoomey/vim-tmux-navigator' " Navigate between Tmux and Vim panes with keystrokes.
    Plug 'phaazon/hop.nvim' " Quickly jump around a buffer using shortcuts.

    " FZF for fuzzy finding. Requires FZF to be installed via Homebrew.
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }

    " ---- Display ----
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'sonph/onehalf', { 'rtp': 'vim' }

    " ---- Search ----
    Plug 'jremmen/vim-ripgrep' " Search via RipGrep
    Plug 'qxxxb/vim-searchhi' " Enable better highlighting of search matches.

    " ---- Code Editing ----
    Plug 'scrooloose/nerdcommenter' " Comment chunks of code
    Plug 'fedepujol/move.nvim' " Move chunk of code in visual mode

    " Auto-complete engine
    Plug 'ms-jpq/coq_nvim', {'branch': 'coq'}

    " 9000+ snippets for auto-complete engine.
    Plug 'ms-jpq/coq.artifacts', {'branch': 'artifacts'}

    " Enhance language parser, which adds better syntax highlighting and also
    " provides a framework for installing language-specific language helpers
    " for auto-completion.
    Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

    " Support start/end tag completion for JSX/TSX files.
    Plug 'windwp/nvim-ts-autotag'

    " Improve auto-indendation for JSX files.
    Plug 'neoclide/vim-jsx-improve'

    " Auto-complete most basic pairs, e.g (), {}, etc.
    Plug 'windwp/nvim-autopairs'

    " Auto-complete if/else and def in Ruby.
    Plug 'RRethy/nvim-treesitter-endwise'

    " Add support for code diagnostics and auto-formating.
    Plug 'jose-elias-alvarez/null-ls.nvim'

    " Required by null-ls.nvim
    Plug 'nvim-lua/plenary.nvim'

    " ---- Git ----
    Plug 'tpope/vim-fugitive' " Use Git commands in vim

    " ---- Code Viewing ----
    Plug 'junegunn/goyo.vim' " Zen Mode, credits to Ustasb
    Plug 'ntpeters/vim-better-whitespace' " Highlight extra whitespace
  call plug#end()
" }}}

" <<<< Misc >>>> {{{
  set termguicolors

  syntax on " Enable syntax highlighting

  set mouse+=a " Allow the mouse to interact with Vim e.g clicking the close icon in the tab bar.

  " Set the new Leader key to ","
  let mapleader=","

  " Use kj to go back to Normal mode.
  inoremap kj <C-[>

  " Disable the escape button as a way to go back to Normal mode.
  inoremap <Esc> <Nop>

  " Reload the NeoVim config.
  nmap <Leader>s :source ~/.config/nvim/init.vim<CR>

  " Open the Vimrc in the current Vim pane.
  nmap <Leader>vv :e ~/.config/nvim/init.vim<CR>

  " Indenting
  filetype plugin indent on " Enable smart indentation based on filetypes.
  set expandtab
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set autoindent
  set smartindent
  set shiftround
  set smarttab

  " No swp files
  set noswapfile
  set nobackup
  set nowb

  " When using "y" to copy from Vim, copy to the global Clipboard used by all
  " apps.
  " https://github.com/tmux/tmux/issues/543
  set clipboard=unnamed

  " Basic save/open/quit operations
  nmap <Leader>w :w<CR>
  nmap <Leader>e :e
  nmap <Leader>q :q<CR>
  nmap <Leader>.q :q!<CR>
  nmap <Leader>.e :e!<CR>
  nmap <Leader>wq :wq<CR>

  " Reselect visual block after indent/outdent.
  vnoremap < <gv
  vnoremap > >gv

  " Toggle to the last used buffer.
  nmap <Leader>j :e #<CR>

  " Remove highlighting
  nmap <Leader>h :noh<CR>

  " Toggle spell check
  nmap <Leader>ss :setlocal spell! spelllang=en_us<CR> " Toggle spellcheck

  " Search for text in visual block
  vnoremap * y/<C-R>"<CR>N

  " Disable modelines for security reasons.
  " https://www.techrepublic.com/article/turn-off-modeline-support-in-vim/
  set modelines=0 " Disable for security reasons0

  " - Add a line below/above and stay in normal mode -
  nmap <Space>] Okj
  nmap <Space>[ okj

  set nowrap " Don't wrap long lines.
  set number " Show line numbers
  set scrolloff=3 " Always show at least 3 lines above/below the cursor
  set sidescrolloff=15 " Always show at least 3 characters to the right/left of the cursor

  " Remove trailing whitespaces on save.
  " https://howchoo.com/vim/vim-how-to-remove-trailing-whitespace-on-save
  autocmd BufWritePre * :%s/\s\+$//e

  " Run PlugInstall
  nnoremap <Leader>pi :PlugInstall<Cr>
  nnoremap <Leader>pc :PlugClean<Cr>

  " Searching
  set hlsearch " Highlight all words that match the search term.
  set incsearch " Search for keywords as you type them.

  " Needed for smartcase to work.
  " https://github.com/vrapper/vrapper/issues/620
  set ignorecase

  set smartcase " Search will be case sensitive if it contains an uppercase letter.

  " Folding
  set foldenable " Enable folding.
  set foldlevel=0 " Close all folds by default when you open the file.
  set foldmethod=marker " Folds are detected using a special marker.
  set foldmarker={{{,}}} " This is the marker used to determine fold start/end points.

  " Open all folds.
  nnoremap zO zR<CR>

  " Close all folds.
  nnoremap zC zM<CR>

  " Toggle the current fold. We add 'k' to the end of the statement because
  " for some reason the cursor was moving down one line.
  nnoremap zt za<CR>k

  " Auto format with new lines in visual mode
  vmap Q gq

" }}}

" <<<< Navigation >>>> {{{

  " ---- NerdTree Plugin ----
  let g:NERDTreeWinSize = 40 " NerdTree window size.

  " Open NerdTree.
  nmap <Leader>nc :NERDTreeFind <CR>

  " ---- FZF Plugin ----
  " Open a new buffer via FZF
  nmap <Leader>t :FZF! <CR>

  " ---- Hop Plugin ----

" Initialize Hop. Cannot be parsed when indented.
lua << EOF
  require'hop'.setup()
EOF

  nnoremap <Leader>hw :HopWord<Cr>
  nnoremap <Leader>hl :HopLine<Cr>

" }}}

" <<<< Display >>>> {{{

  " ---- Airline Plugin ----
  let g:airline#extensions#tabline#enabled = 1 " Enable the tab line.
  let g:airline#extensions#tabline#buffer_min_count = 2 " Don't show the tab bar if there is only one open buffer.

  " Move to the next buffer tab
  nmap <Space>l :bnext<CR>

  " Move to the previous buffer tab
  nmap <Space>h :bprevious<CR>

  " Close the current buffer tab
  nmap <Space>q :bp <BAR> bd #<CR>

  " Remove unnecessary information from the bottom bar.
  let g:airline#extensions#default#layout = [
        \ [ 'a', 'c'  ],
        \ []
        \ ]

  " Only show the filename in the buffer bar, not the full filepath.
  let g:airline#extensions#tabline#fnamemod = ':t'
" }}}

" <<<< Search >>>> {{{

  " ---- RipGrep Plugin ----

  " Start the RipGrep command where you manually enter what you want to search
  " for.
  nmap <leader>ag :Rg '

  " Search for the current word under the cursor.
  nmap <leader>as :Rg "<C-R><C-W>"<CR>

  " Search for the current visual selection.
  xnoremap <Leader>av y:Rg <C-r>=fnameescape(@")<CR><CR>

  " Highlight matches.
  let g:rg_highlight=1

  " ---- Vim Searchhi Plugin ----
  " Copied from their instructions - https://github.com/qxxxb/vim-searchhi#quick-start
  nmap n <Plug>(searchhi-n)
  nmap N <Plug>(searchhi-N)
  nmap * <Plug>(searchhi-*)
  nmap g* <Plug>(searchhi-g*)
  nmap # <Plug>(searchhi-#)
  nmap g# <Plug>(searchhi-g#)
  nmap gd <Plug>(searchhi-gd)
  nmap gD <Plug>(searchhi-gD)

  vmap n <Plug>(searchhi-v-n)
  vmap N <Plug>(searchhi-v-N)
  vmap * <Plug>(searchhi-v-*)
  vmap g* <Plug>(searchhi-v-g*)
  vmap # <Plug>(searchhi-v-#)
  vmap g# <Plug>(searchhi-v-g#)
  vmap gd <Plug>(searchhi-v-gd)
  vmap gD <Plug>(searchhi-v-gD)

  nmap <silent> <Leader>h <Plug>(searchhi-clear-all)
  vmap <silent> <Leader>h <Plug>(searchhi-v-clear-all)

" }}}

" <<<< Code Editing >>>> {{{

  " ---- NerdCommenter Plugin ----
  let g:NERDSpaceDelims = 1 " Add a space after the comment delimiter.
  let g:NERDCompactSexyComs = 1 " Use compact syntax for prettified multi-line comments.
  let g:NERDDefaultAlign = 'left' " Align line-wise comment delimiters flush left instead of following code indentation
  let g:NERDCommentEmptyLines = 1 " Allow commenting and inverting empty lines (useful when commenting a region)
  let g:NERDTrimTrailingWhitespace = 1 " Enable trimming of trailing whitespace when uncommenting
  let g:NERDToggleCheckAllLines = 1

  " Comment and yank single line/visual block.
  nnoremap <Leader>cy <plug>NERDCommenterYank

  " Toggle the commenting of a single line/visual block.
  nnoremap <Leader>c<Space> <plug>NERDCommenterToggle

  " Toggle the commenting of a single line/visual block.
  nnoremap <Leader>ca <plug>NERDCommenterAppend

  " ---- Move Plugin ----

  " Move line under cursor down 1 line.
  nnoremap <silent> <Space>j :MoveLine(1)<CR>

  " Move line under cursor up 1 line.
  nnoremap <silent> <Space>k :MoveLine(-1)<CR>

  " Move visually selected block down 1 line. The moved block didn't always
  " have the right indentation, so adding '=' to format the block and 'gv' to
  " reselect the visual block.
  vnoremap <silent> <Space>k :MoveBlock(-1)<CR>=gv

  " Move visually selected block up 1 line. The moved block didn't always
  " have the right indentation, so adding '=' to format the block and 'gv' to
  " reselect the visual block.
  vnoremap <silent> <Space>j :MoveBlock(1)<CR>=gv

  lua require('plugins/coq_nvim')
  lua require('plugins/nvim-treesitter')
  lua require('plugins/nvim-autopairs')
  lua require('plugins/nvim-treesitter-endwise')
  lua require('plugins/nvim-ts-autotag')
  lua require('plugins/lsp')

" }}}

" <<<< Code Viewing >>>> {{{

  " ---- Goyo Plugin ----

  " Toggle zen mode.
  nnoremap <Leader>z :Goyo<Cr>

" }}}

" <<<< Git >>>> {{{

  " ---- Vim Fugitive Plugin ----

  " Open Git Blame in the sidebar.
  nnoremap <Leader>gb :Git blame<Cr>

" }}}

" <<<< Color Scheme >>>> {{{

  set background=light
  colorscheme onehalflight

  " Update the text color of the Pop up menu so that it stands out better.
  hi Pmenu guifg=#9ca3af

" }}}

" <<<< Color Scheme Modifications >>>> {{{

  " Update colors of the current search match.
  highlight CurrentSearch gui=reverse,bold guifg=#ff70f5 guibg=#FFFFFF

  " Update colors of the non-current search matches.
  hi Search guibg=#00becf guifg=#000000

  " Ensure Ruby diagnostic warnings are red.
  hi DiagnosticInfo  guifg=Red

" }}}

