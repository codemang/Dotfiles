" <<<< Plug >>>> {{{
  " Auto-install VimPlug if it's not yet installed.
  " https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
  let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
  if empty(glob(data_dir . '/autoload/plug.vim'))
    silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif

  " Load all Vim plugins.
  call plug#begin('~/.local/share/nvim/plugged')
    " ---- Navigation ----
    Plug 'scrooloose/nerdtree' " Tree-styled file navigator
    Plug 'christoomey/vim-tmux-navigator' " Navigate between Tmux and Vim panes with keystrokes.

    " FZF for fuzzy finding. Requires FZF to be installed via Homebrew.
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' }

    " ---- Display ----
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
  call plug#end()
" }}}

" <<<< Misc >>>> {{{
  set termguicolors

  set mouse+=a " Allow the mouse to interact with Vim e.g clicking the close icon in the tab bar.

  syntax on " Enable syntax highlighting

  " Set the new Leader key to ","
  let mapleader=","

  " Use kj to go back to Normal mode.
  inoremap kj <C-[>

  " Disable the escape button as a way to go back to Normal mode.
  inoremap <Esc> <Nop>

  " Reload the NeoVim config.
  nmap <Leader>s :source ~/.config/nvim/init.vim<CR>

  " Open the Vimrc in the current Vim pane.
  nmap <Leader>vv :e ~/.config/nvim/init.vim<CR>

  " Indenting
  filetype plugin indent on " Enable smart indentation based on filetypes.
  set expandtab
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set autoindent
  set smartindent
  set shiftround
  set smarttab

  " No swp files
  set noswapfile
  set nobackup
  set nowb

  " When using "y" to copy from Vim, copy to the global Clipboard used by all
  " apps.
  " https://github.com/tmux/tmux/issues/543
  set clipboard=unnamed

  " Basic save/open/quit operations
  nmap <Leader>w :w<CR>
  nmap <Leader>e :e
  nmap <Leader>q :q<CR>
  nmap <Leader>.q :q!<CR>
  nmap <Leader>.e :e!<CR>
  nmap <Leader>wq :wq<CR>

  " Reselect visual block after indent/outdent.
  vnoremap < <gv
  vnoremap > >gv

  " Toggle to the last used buffer.
  nmap <Leader>j :e #<CR>

  " Remove highlighting
  nmap <Leader>h :noh<CR>

  " Toggle spell check
  nmap <Leader>ss :setlocal spell! spelllang=en_us<CR> " Toggle spellcheck

  " Search for text in visual block
  vnoremap * y/<C-R>"<CR>N

  " Disable modelines for security reasons.
  " https://www.techrepublic.com/article/turn-off-modeline-support-in-vim/
  set modelines=0 " Disable for security reasons0

  " - Add a line below/above and stay in normal mode -
  nmap <Space>] Okj
  nmap <Space>[ okj

  set nowrap " Don't wrap long lines.
  set number " Show line numbers
  set scrolloff=3 " Always show at least 3 lines above/below the cursor
  set sidescrolloff=15 " Always show at least 3 characters to the right/left of the cursor

  " Remove trailing whitespaces on save.
  " https://howchoo.com/vim/vim-how-to-remove-trailing-whitespace-on-save
  autocmd BufWritePre * :%s/\s\+$//e
" }}}

" <<<< Navigation >>>> {{{

  " ---- NerdTree Plugin ----
  let g:NERDTreeWinSize = 40 " NerdTree window size.

  " Open NerdTree.
  nmap <Leader>nc :NERDTreeFind <CR>

  " ---- FZF Plugin ----
  " Open a new buffer via FZF
  nmap <Leader>t :FZF! <CR>
" }}}

" <<<< Display >>>> {{{

  " ---- Airline Plugin ----
  let g:airline#extensions#tabline#enabled = 1 " Enable the tab line.
  let g:airline#extensions#tabline#buffer_min_count = 2 " Don't show the tab bar if there is only one open buffer.

  " Move to the next buffer tab
  nmap <Space>l :bnext<CR>

  " Move to the previous buffer tab
  nmap <Space>h :bprevious<CR>

  " Close the current buffer tab
  nmap <Space>q :bp <BAR> bd #<CR>

  " Remove unnecessary information from the bottom bar.
  let g:airline#extensions#default#layout = [
        \ [ 'a', 'c'  ],
        \ []
        \ ]

  " Only show the filename in the buffer bar, not the full filepath.
  let g:airline#extensions#tabline#fnamemod = ':t'
" }}}

" <<<< Color Scheme >>>> {{{

colorscheme papercolor
set background=light

" }}}

