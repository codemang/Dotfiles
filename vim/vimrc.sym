" <<<< Plug >>>> {{{
  call plug#begin('~/.local/share/nvim/plugged')


  " TMUX
  Plug 'christoomey/vim-tmux-navigator' " Navigate tmux/vim panes the same way

  " Navigation
  Plug 'easymotion/vim-easymotion' " Helpful navigation
  Plug 'scrooloose/nerdtree' " Navigate file system'

  " Details Bar
  Plug 'vim-airline/vim-airline'
  Plug 'vim-airline/vim-airline-themes'

  " Search
  Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': 'yes \| ./install' } " Needs FZF via Homebrew
  Plug 'mileszs/ack.vim' " Search project, needs Silver Surfer via Homebrew

  " Web
  Plug 'tpope/vim-rails'
  Plug 'rstacruz/vim-hyperstyle' " experimental

  " Syntax and formatting
  Plug 'Glench/Vim-Jinja2-Syntax' " Syntax highlighting for ansible
  Plug 'chase/vim-ansible-yaml' " Better yaml indentation
  Plug 'tpope/vim-endwise' " Adds endif in ruby
  Plug 'vim-ruby/vim-ruby' " All purpose ruby plugin
  Plug 'rstacruz/vim-closer' " Close braces and brackets
  " Plug 'JamshedVesuna/vim-markdown-preview'
  Plug 'suan/vim-instant-markdown'
  Plug 'alvan/vim-closetag' " Close HTML tags

  " Git
  Plug 'tpope/vim-unimpaired' " Key mappings for navigating git commit history
  Plug 'tpope/vim-fugitive' " Use git commands in vim

  " Javascript
  Plug 'isRuslan/vim-es6'
  Plug 'mxw/vim-jsx'
  Plug 'pangloss/vim-javascript'

  " Misc
  Plug 'junegunn/goyo.vim' " Zen Mode, credits to Ustasb
  Plug 'ntpeters/vim-better-whitespace' " Highlight extra whitespace
  Plug 'matze/vim-move' " Move chunk of code in visual mode
  Plug 'mhinz/vim-startify' " Nice start screen for vim
  Plug 'scrooloose/nerdcommenter' " Comment chunks of code
  Plug 'lifepillar/vim-mucomplete' " Auto-complete

  Plug 'codemang/vim-colorscheme-switcher' " Switch colorschemes without breaking
  Plug 'xolox/vim-misc' " Needed by vim-colorscheme-switcher

  call plug#end()
" }}}


" <<<< Misc >>>> {{{
  filetype plugin indent on
  syntax enable
  set t_Co=256
  set termguicolors
  set shell=/bin/zsh
  set modelines=0 " Disable for security reasons0

  " https://github.com/tmux/tmux/issues/543
  set clipboard=unnamed

  " https://stackoverflow.com/questions/16902317/vim-slow-with-ruby-syntax-highlighting
  set re=1

  let mapleader=","

  " Remap escape to fd
  inoremap kj <Esc>
  inoremap <esc> <nop>

  " Misc
  set mouse=a
  set nocompatible " Use all new vim functionality, as opposed to vi
  set backspace=indent,eol,start " Make backspace work as expected
  set number " Show line numbers
  set shortmess=atI " No welcome message
  set laststatus=2 " Always show vim-airline status
  set splitbelow " Open new pane to the bottom
  set splitright " Open new pane to the right
  set noerrorbells visualbell t_vb= " Disable bells

  " Tabs and indenting
  set expandtab
  set tabstop=2
  set shiftwidth=2
  set softtabstop=2
  set autoindent
  set smartindent
  set shiftround
  set smarttab

  " Scroll relative to cursor
  set scrolloff=3
  set sidescrolloff=15

  " No swp files
  set noswapfile
  set nobackup
  set nowb

  " Wild menu
  set wildmenu
  set wildmode=full


  " Set ruby path for more speed
  let g:ruby_path = system('/usr/bin/ruby')

  " Prevent highlighting when sourcing vimrc
  let @/=''

  " Reselect visual block after indent/outdent.
  vnoremap < <gv
  vnoremap > >gv


  " Auto format with new lines in visual mode
  vmap Q gq
  "
  " Vimrc editing and sourcing
  nmap <Leader>vv :e ~/.vimrc<CR>
  nmap <Leader>s :source ~/.vimrc<CR>:AirlineRefresh<CR>

  " Basic save/open/quit operations
  nmap <Leader>w :w<CR>
  nmap <Leader>e :e
  nmap <Leader>q :q<CR>
  nmap <Leader>.q :q!<CR>
  nmap <Leader>.e :e!<CR>
  nmap <Leader>wq :wq<CR>
  "
  " Toggle buffers
  nmap <Leader>j :e #<CR>

  " Remove highlighting
  nmap <Leader>h :noh<CR>

  " Toggle spell check
  nmap <Leader>ss :setlocal spell! spelllang=en_us<CR> " Toggle spellcheck

  " Allow saving with sudo permission.
  function! SudoSaveFile()
    exec 'silent :w !sudo tee > /dev/null %'
  endfunction
  command! SudoSave call SudoSaveFile()

  " Search for text in visual block
  vnoremap * y/<C-R>"<CR>N

" }}}


" <<<<  Navigation >>>> {{{

  " - Move up and down through visual lines -
  nnoremap j gj
  nnoremap k gk

  " - Nerd Tree -
  nmap <Leader>nn :NERDTree <CR>
  nmap <Leader>n :NERDTree
  nmap <Leader>nb :NERDTreeFromBookmark
  nmap <Leader>nt :NERDTreeToggle <CR>
  nmap <Leader>nm :NERDTreeMirror <CR>
  nmap <Leader>nw :NERDTreeCWD <CR>
  nmap <Leader>nc :NERDTreeFind <CR>

  let g:NERDTreeWinSize = 40

  " - Easy Motion -
  hi EasyMotionTarget ctermbg=none ctermfg=red
  hi EasyMotionTarget2Second ctermbg=none ctermfg=red
  hi EasyMotionTarget2First ctermbg=none ctermfg=red

  " - Buffer Navigation -
  nmap <Space>l :bnext<CR> " Move to the next buffer tab
  nmap <Space>h :bprevious<CR> " Move to the previous buffer tab
  nmap <Space>q :bp <BAR> bd #<CR> " Close the current buffer tab

  " - Show Tags In File -
  nnoremap <Leader>mt :TagbarToggle<CR>

  " Toggle between ruby do/end keywords
  runtime macros/matchit.vim
" }}}


" <<<< Search >>>> {{{

  " - Misc -
  set hlsearch
  set incsearch
  set ignorecase
  set smartcase
  hi Search cterm=NONE ctermfg=white ctermbg=red

  " - FZF -
  nmap <Leader>t :FZF! <CR>
  command! FZFMru call fzf#run({
        \  'source':  v:oldfiles,
        \  'sink':    'e',
        \  'options': '-m -x +s',
        \  'down':    '40%'})
  nmap <Leader>r :FZFMru <CR>

  " - Ag -
  nmap <leader>ag :Ack! '
  nmap <leader>as :Ack! "<C-R><C-W>"<CR>
  let g:ag_highlight=1
  if executable('ag')
    let g:ackprg = 'ag --vimgrep'
  endif

  xnoremap <Leader>av y:Ack <C-r>=fnameescape(@")<CR><CR>

" }}}


" <<<< Colors >>>> {{{

  highlight VertSplit ctermbg=none
  highlight VertSplit ctermfg=none
  highlight Comment ctermbg=none ctermfg=243
  highlight SignColumn guibg=darkgrey ctermbg=none ctermfg=none
  highlight LineNr ctermbg=none

" }}}


" <<<< Syntax and Formatting >>>> {{{

  set foldenable
  set foldlevel=0
  set foldmethod=marker
  set foldmarker={{{,}}}

  nnoremap zO zR<CR>
  nnoremap zC zM<CR>

  set nowrap

  hi StatusLine ctermbg=white ctermfg=black
  hi WildMenu ctermbg=black ctermfg=white
  au BufNewFile,BufFilePre,BufRead *.md set filetype=markdown tw=80 fo+=t

  " - Make tildas invisible below code -
  highlight NonText ctermfg=0

  " - Strip trailing whitespace and end of file new lines -
  function! StripWhitespace()
    let save_cursor = getpos(".")
    let old_query = getreg('/')
    :%s/\s\+$//e
    call setpos('.', save_cursor)
    call setreg('/', old_query)

    let save_cursor = getpos(".")
    :silent!:%s#\($\n\s*\)\+\%$##
    call setpos('.', save_cursor)
  endfunction
  nmap <Leader>sw :call StripWhitespace()<CR>
  autocmd BufWritePre * :call StripWhitespace()

  " - Add a line below/above and stay in normal mode -
  nmap <Space>] Okj
  nmap <Space>[ okj

  " - Batch Commenting -
  let g:NERDSpaceDelims = 1
  let g:NERDCompactSexyComs = 1
  let g:NERDDefaultAlign = 'left'
  let g:NERDCommentEmptyLines = 1
  let g:NERDTrimTrailingWhitespace = 1

  " - Goyo Vim -
  nmap <Leader>gy :Goyo<CR>

  " - Ansible -
  let g:ansible_extra_syntaxes = "/usr/share/vim/vim73/syntax/sh.vim /usr/share/vim/vim73/syntax/ruby.vim"

  " - Markdown -
  let g:vim_markdown_folding_disabled=1


  " - JBuilder syntax highlighting -
  au BufNewFile,BufRead *.json.jbuilder set ft=ruby

  nnoremap <Leader>wr :set wrap!<CR>

  " - Move Visual Blocks -
  vmap <c-j> <Plug>MoveBlockDown
  vmap <c-k> <Plug>MoveBlockUp
  nmap <c-j> <Plug>MoveLineDown
  nmap <c-k> <Plug>MoveLineDown

  " Python tabs
  au Filetype python setl et ts=2 sw=2

"  }}}
"

" <<<< Details Bar >>>> {{{

  " - Airline -
  let g:airline_section_z=''

  set encoding=utf-8
  let g:airline_theme="angr"
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#fnamemod = ':t'
  let g:airline#extensions#tabline#buffer_min_count = 2

  let g:airline_powerline_fonts = 1
  let g:airline#extensions#default#layout = [
        \ [ 'a', 'c'  ],
        \ []
        \ ]

  set hidden " Lets you switch tabs without saving

  let g:airline#extensions#ale#enabled = 1

"  }}}


" <<<< TMUX >>>> {{{

  " https://szunyog.github.io/vim/vim-automatically-set-paste-mode
  function! WrapForTmux(s)
    if !exists('$TMUX')
      return a:s
    endif

    let tmux_start = "\<Esc>Ptmux;"
    let tmux_end = "\<Esc>\\"

    return tmux_start . substitute(a:s, "\<Esc>", "\<Esc>\<Esc>", 'g') . tmux_end
  endfunction

  let &t_SI .= WrapForTmux("\<Esc>[?2004h")
  let &t_EI .= WrapForTmux("\<Esc>[?2004l")

  function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
  endfunction

  inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()

" }}}


" <<<< Colors >>>> {{{

  " Shell out to toggle global colorscheme
  if !exists('*ToggleGlobalColorschemeFunc')
    function! ToggleGlobalColorschemeFunc()
      silent! execute '! source ~/.zshrc && ruby ~/Dotfiles/util/toggle_colors.rb &'
    endfunction
  endif
  command! ToggleGlobalColorscheme call ToggleGlobalColorschemeFunc()
  nmap <Space>cs :ToggleGlobalColorscheme<CR>

  " Receive message to reload current vim processes colorscheme
  if !exists('*LoadColorschemeFunc')
    function! LoadColorschemeFunc()
      let lightTheme = system("[[ $(head -n 1 ~/Dotfiles/env/colorscheme.zsh) == *light* ]] && echo 1")
      if lightTheme == 1
        :ChooseColorScheme papercolor
        set background=light
        let g:airline_theme='papercolor'
        :AirlineRefresh
      else
        " :ChooseColorScheme onedark
        :ChooseColorScheme gruvbox
        set background=dark
        :AirlineRefresh
      endif
    endfunction
  endif
  command! LoadColorscheme call LoadColorschemeFunc()

  "Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
  "If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
  "(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif

  " Only use user installed colors
  let g:colorscheme_switcher_exclude_builtins = 1

  autocmd VimEnter * LoadColorscheme

" }}}
"
let g:closetag_filenames = '*.html,*.xhtml,*.phtml, *.jsx'

set completeopt+=menuone
set completeopt+=noselect
set completeopt+=noinsert
set shortmess+=c   " Shut off completion messages
set belloff+=ctrlg " If Vim beeps during completion
let g:mucomplete#enable_auto_at_startup = 1
